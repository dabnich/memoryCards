<HTML>
<head>
<style>
table{
	border: solid 1px;
	padding: 0;
	margin: 0px;
	border-collapse: separate;
	border-spacing: 50px 30px;
}

table td{
	width: 95px;
	height: 150px;
	border: solid 1px;
	border-spacing: 50px 30px;

}

tr{
	
}
</style>
</head>
<body>

<button onclick="createGame()">start</button>
<div id="a"></div>

<script type="text/javascript">

var images = ["1.jpg", "2.jpg", "3.jpg", "4.jpg", "5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg"];
var uncoverCards = [-1,-1];
var cards = new Array();  //macierz odkrytych/zakrytych kart do wyÅ›wietlenia na ekranie
var ids = new Array();    //tylko dla losowania id kart przy generowaniu tabelki
var timer = 3000;
var counter = 0;
var rate = 1000/25;
var run = false;
var actions = 0;
var interval = 0;

function start() {
	interval = setInterval(function(){controll();}, rate);
}

function createGame(){
	if(interval!=0){
		clearInterval(interval);
	}
	interval = 0;
	var t = document.getElementsByTagName("table");
	if(t.length>0){
		var table = t[0];
		table.parentElement.removeChild(table);
	}
	if(cards.length>0) cards = new Array();
	if(ids.length>0) ids = new Array();
	timer=3000;
	counter = 0;
	uncoverCards = [-1,-1];
	actions = 0;
	createTable(3,2);
}

function createTable(cols, rows) {
	var table = document.createElement("table");
	table.style.margin = "0px";
	table.style.padding = "0px";
	table.style.borderCollapse = "separate";
	table.style.borderSpacing = "50px 30px";
    
	for(var r=0; r<rows; r++){
		var tr = document.createElement("tr");
		for(var c=0; c<cols; c++){
			var td = document.createElement("td");
			td.style.width = "95px";
			td.style.height = "150px";
			td.style.border = "solid 1px";
			td.style.textAlign = "center";
			td.style.fontSize = "35";
			
			var rand = Math.floor(Math.random()*(cols*rows));
			while (inArray(rand)) {
                rand = Math.floor(Math.random()*(cols*rows));
            }
			ids.push(rand);
			td.id = rand;
			td.onclick = function(){showCard(this);};
			/*
			var h6 = document.createElement("h6");
			var node = document.createTextNode(Math.floor(rand/2));
			h6.appendChild(node);
			td.appendChild(h6);
			*/
			tr.appendChild(td);
		}
		table.appendChild(tr);
	}
	document.body.appendChild(table);
	
	for(var i=0; i<rows*cols; i++){
		cards[i] = 0;
	}
}

function controll() {
	if (uncoverCards[0]>-1 || uncoverCards[1]>-1) {
		timer = timer-rate;
	}
	else {
		timer = 1500;
	}
	if (timer<=0) {
        if (uncoverCards[0]>-1) {
			cards[uncoverCards[0]] = 0;
			uncoverCards[0] = -1;
			//document.getElementById(uncoverCards[0]).innerHTML = "";
        }
		if (uncoverCards[1]>-1) {
			cards[uncoverCards[1]] = 0;
			uncoverCards[1] = -1;
			//document.getElementById(uncoverCards[1]).innerHTML = "";
        }
		timer = 1500;
    }
	var data="";
	for(var i=0; i<cards.length; i++){
		if (cards[i]==1) {
            document.getElementById(i).style.border = "solid 2px red";
        }
		else {
			document.getElementById(i).textContent = "";
			document.getElementById(i).style.border = "solid 1px black";
		}
		data = data+","+cards[i];
	}
	document.getElementById("a").textContent = data;
	if (isEnd()==true) {
        endGame();
	}
	counter = counter+rate;
}

function endGame(){
	if(run==true) run = false;
	if(interval!=0){
		clearInterval(interval);
		interval = 0;
	}
	alert("Finish Game in "+counter/1000+"s  and "+actions+" actions");	
}

function showCard(cardEl) {
    if (run==false) {
		start();
		run = true;
    }
	if(cards[cardEl.id]==1) {
		if (!isPair(cardEl.id)) {
            cards[cardEl.id] = 0;
			if (uncoverCards[0]>-1) {
               cards[uncoverCards[0]] = 0;
            }
			if (uncoverCards[1]>-1) {
               cards[uncoverCards[1]] = 0;
            }
			uncoverCards[0] = -1;
			uncoverCards[1] = -1;
			//return false;
        }
	}
	else{
		if(uncoverCards[0]==-1 && uncoverCards[1]==-1) {
		   uncoverCards[0] = cardEl.id;
		   cards[cardEl.id] = 1;
		   timer = 1500; //zakryje 1 z opoznieniem
		}
		else{
			if(uncoverCards[1]==-1) {
				uncoverCards[1] = cardEl.id;
				cards[cardEl.id] = 1;
				if(Math.floor(uncoverCards[0]/2)==Math.floor(uncoverCards[1]/2)) {
					cards[uncoverCards[0]] = 1;
					cards[uncoverCards[1]] = 1;				
					uncoverCards[0] = -1;
					uncoverCards[1] = -1;
					//return true;
				}
				else {
					timer = 1500; //zakryje 2 z opoznieniem
				}
			}
			else{ //sytuacja gdy czekamy az schowaja sie 2 nieprawidlowe odkryte karty i klikniemy w jeszcze jakas inna karte
				cards[uncoverCards[0]] = 0;
				cards[uncoverCards[1]] = 0;	
					//return false;
				uncoverCards[0] = cardEl.id;
				uncoverCards[1] = -1;			
				cards[uncoverCards[0]] = 1;
				//hideCards(cardEl);
				//return false;
			}
		}
		actions = actions+1;
	}
	if (uncoverCards[0]>-1){
        cards[uncoverCards[0]] = 1;
    }
	if (uncoverCards[1]>-1){
        cards[uncoverCards[1]] = 1;
    }
	
	for(var i=0; i<cards.length; i++){
		if (cards[i]==1) {
			document.getElementById(i).textContent = Math.floor(i/2);
        }
		if (cards[i]==0) {
			//document.getElementById(i).textContent = "";
        }
	}
}

function isEnd() {
    for(var i=0; i<cards.length; i++){
		if(cards[i]==0) return false
	}
	if (uncoverCards[0]>-1 || uncoverCards[1]>-1) {
        return false;
    }
	return true;
}

function isPair(id) {
    if(id%2==0) {
        if(cards[id+1]==1 && cards[id]==1) return true;
		return false;
    }
	else{
		if(cards[id-1]==1 && cards[id]==1) return true;
		return false;
	}
	return false;
}

function inArray(value) {
    for (var i=0; i<ids.length; i++) {
        if (value==ids[i]) {
            return true;
        }
    }
	return false;
}


</script>
</body>
</HTML>